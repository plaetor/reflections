What happens when you initialize a repository? Why do you need to do it?

	When you initialise a repository a folder with the repository name is 
	created if it did not already exist, and a .git metadata file is added
	to it. This .git file will hold metadata about the repository. it needs 
	to be done so that the .git file can be created, this can then be used 
	to help keep track of the various changes made to the repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	the staging area is an intermediate step that lies between the working 
	directory and the repository. the working directory is where files that 
	are being operated on are kept, after all the necessary changes have been 
	made the files are passed to the staging area where they can then be 
	passed to the repository as a commit. unlike the working directory and the 
	repository which are all directories the staging area is more of an 
	intermdiate storage space where files can be kept before being commited.
	it allows files to be grouped together to form a single commit.

How can you use the staging area to make sure you have one commit per logical
change?

	usually the staging area has the latest commit, so when you make a new 
	change to a file in the working directory you can compare the contents 
	of the file to the contents of that file that are in the staging area 
	in order to see what changes have been made. by doing this you can get 
	an idea of the size of change made in the new file compared to what had 
	been done before. 

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	when you want to add features that extend the functionality of a project
	but are not necessarily part of the main project, that way you can 
	implement and test them out without affecting the main project itself an
	example being; wanting the project in another language, or a paid version 
	of a successful app that does away with ads, or adding a secret super level 
	to a game for hardcore players. these changes can run parrarel to the main
	branch without affecting its functionality.

How do the diagrams help you visualize the branch structure?

	the diagrams help to provide a linear visualisation for the branch structure
	by showing the layout of the commit history and any branching from the master
	that has taken place.it helps to show the various branches in the history of 
	the repository and how they relate to each other, including the flow of the
	commits to show their reachability.


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	when we merge two branches together the commits from the separate branches
	are also merged together to form one solid timeline with each commit 
	sorted according to its timestamp. that way the commits look like they belong
	to one branch. we present it in the diagram the way we do because it helps to
	visualise the merge and remind us that some of the commits that are now next 
	to each other do not necessarily represent a logical step in the development 
	process since they have different parents and so comparisons like git diff 
	between any two like this will show way more changes than expected for 
	adjacent commits simply because though they are adjacent they do not have a
	parent-child relationship.	

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

	when everything is in order git's automatic merging is timesaving since it 
	looks at the separate branches and if there are no conflicts it merges them 
	together into one workflow. if we had to manually merge separate branches
	we would have to take a lot of time looking at the sections of code to ensure 
	they fit together without any conflicts then merging them. automatic merging 
	on the other hand not only saves time by merging conflict free work together,
	but when it comes across any conflict it flags the conflicting sections so that 
	the developers/authors can look at the conflicts and decide what to do with them.
